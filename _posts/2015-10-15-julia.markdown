---
layout: post
title:  "Julia, FixedEffectModels, and what I learned about using a rapidly evolving language "
date:   2015-10-15
categories: julia
---

I had heard about [Julia](http://julialang.org/) at various points, usually by people in the data science/[Kaggle](https://www.kaggle.com/) sphere, but didn't know much about it. However, for my JMP I need to run a few very big regressions, on the order of a billion observations with multiple dimensions of many-leveled fixed effects. `reghdfe`(https://github.com/sergiocorreia/reghdfe) and `lfe`(https://cran.r-project.org/web/packages/lfe/index.html) are the weapons of choice in Stata and R, respectively, for these kinds of models but someone while poking around on the internet I ran across [`FixedEffectModels.jl`](https://github.com/matthieugomez/FixedEffectModels.jl). Click that link and compare the speeds. The graph is killer, and it's not some rigged example - real world experience bears it out.

Suddenly learning Julia became a lot more interesting. I figured, heck, I know Python and R - how hard could it be? It's actually pretty hard. Julia is meant to be easy to code in (like Python) but fast as hell (like C). And it IS easy to code in, sort of. But there are some gotchas to learning a relatively recent language:

    - Sparse documentation: the size and depth of both the official [Julia documentation](http://docs.julialang.org/en/release-0.4/manual/), the StackOverflow tag, and the Julia boards are just smaller than Python. In Python, any question you can think of has been asked many, many times, and it's easy to find. In Julia, your question may have been asked but it's gonna be hard to find it, and there's no guarantee it's been asked at all.
    - Changing functionality: Julia has changed a lot, so pulling up old documentation or answered questions is actually a problem. For example, there used to be an `sqldf` function in the `SQLite` package that automatically converted the result set into a DataFrame. No longer, so far as I know.
    - Typing: Typing is a lot trickier than it is in Python or R. `typeof()` is super valuable, and the typing conventions make sense, but it's a lot to learn. Julia is also very picky about `Null` and `NA` values.
    - "Naturalness": In both Python in R, once you achieve a certain level of comfort you can type things that you think will work and, generally, they will. This is not also true in Julia. Many things DO work intuitively, but having gotten used to the vectorized nature of R in particular I expect certain actions (changing an entire column, for example) to be easy.

A big part of the issue is that I'm facing is not in getting `FixedEffectModels.jl` to work, it's just getting my huge dataset formatted in a way that I can run the darn thing. In principle I could use [DataRead.jl](https://github.com/WizardMac/DataRead.jl), but I haven't figured out how to compile ReadStat on a PC (the server I'm using). So instead I'm limited to either importing via cleaned CSV or SQLite database. SQLite is much faster but I have to redo all of the cleaning, while CSV is painfully slow and runs out of memory because Julia gets the types wrong (see: "Naturalness"). So now I'm learning how to import the data through SQLite in chunks, type it properly, and merge in the datasets I use in my Stata cleaning process. All before I get to run a single regression. And three weeks before my JMP needs to be done. 
